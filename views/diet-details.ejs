<%- include('partials/header.ejs') -%>

<div class="container">
    <ul class="collection with-header">
        <li class="collection-header sticky">
            <%- header %>
            <a class="btn-small" href="/diet">anwenden</a>
        </li>
        <% list.forEach(function(item,index){ %>
            <li class="collection-item">
                <div>
                    <span class="title"><%=item%></span>
                </div>
                <label class="secondary-content">
                    <input type="checkbox" onchange="<%= onchange %>" value="<%=item%>"
                    class="filled-in"/>
                    <span></span>
                </label>
            </li>
        <% }) %>
    </ul>
</div>

<script>
window.onload = <%= onload %>;



//set alergies checkboxes
async function updateAllergiesCheckboxes() {
    const userAllergies = await getUserAllergies();
    let checkboxes = document.querySelectorAll('input[type=checkbox]');
    checkboxes.forEach(checkbox => {
        if (userAllergies.includes(checkbox.value)) {
            checkbox.checked = true;
        };
    })
};


//set checkbox
async function updateAdditivesCheckboxes() {
    const userAdditives = await getUserAdditives();
    let checkboxes = document.querySelectorAll('input[type=checkbox]');
    checkboxes.forEach(checkbox => {
        if (userAdditives.includes(checkbox.value)) {
            checkbox.checked = true;
        };
    })
};

//get user allergies from indb
async function getUserAllergies() {
    const pref = await getUserPreferences();
    return pref.userAllergies;
};

//get user additives from indb
async function getUserAdditives() {
    const pref = await getUserPreferences();
    return pref.userAdditives;
};

//get User Preferences from Indb
async function getUserPreferences() {
    await db.open();
    const pref = await db.userStore.toArray();
    return pref[0];
};

// add/remove allergies to/from indb column "userAllergies"
async function updateAllergy(allergy) {
    const oldAllergies = await getUserAllergies();
    let newAllergies = [];
    if (!oldAllergies.length || !oldAllergies.includes(allergy)) {
        oldAllergies.push(allergy);
        newAllergies = [...oldAllergies];
    } else {
        newAllergies = oldAllergies.filter(item => item !== allergy);
    };
    db.transaction("rw", db.userStore, async() => {
        await db.userStore.orderBy('id').modify({
            "userAllergies": newAllergies.sort()
        });
    }).catch(Dexie.ModifyError, error => {
        console.error(`${error.failures.length} items failed to modify`);
    }).catch(error => {
        console.error(`Generic Error ${error}`);
    });
};

// add/remove additives to/from indb column "userAdditives"
async function updateAdditive(additive) {
    const oldAdditives = await getUserAdditives();
    let newAdditives = [];
    if (!oldAdditives.length || !oldAdditives.includes(additive)) {
        oldAdditives.push(additive);
        newAdditives = [...oldAdditives];
    } else {
        newAdditives = oldAdditives.filter(item => item !== additive);
    };
    db.transaction("rw", db.userStore, async() => {
        await db.userStore.orderBy('id').modify({
            "userAdditives": newAdditives.sort()
        });
    }).catch(Dexie.ModifyError, error => {
        console.error(`${error.failures.length} items failed to modify`);
    }).catch(error => {
        console.error(`Generic Error ${error}`);
    });
};
</script>
<%- include('partials/footer.ejs') -%>