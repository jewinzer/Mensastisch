<%- include('partials/header.ejs') -%>

<div class="container hero bg-light">
        <div class="d-flex">
            <div class="heroPrimary">
                <%- heroContentPrimary %>
            </div>
            <div class="heroSecondary">
            </div>
        </div>
        <div class="heroTertiary">
            <%- heroContentTertiary %>
        </div>
</div>
<div class="container">
    <div class="row" id="mainContent">
        <%- mainContent %>
    </div>
</div>

<script>
"use strict";

window.onload = <%= onload %>;


//show last visited canteen if found in indb
async function showLastVisitedCanteen(){
    const last = await getLastVisitedCanteen().catch(error => console.log("First visit. Rendering welcome page."));
    if(last){
        document.location = '/?canteenId='+last;
    };
};


//////////////////////////////////////////////////////////////////////////////////////////
///Menu LIST
/////////////////////////////////////////////////////////////////////////////////////////



//add menu to DOM
async function showMenu(date, canteenId) {
    const menuRaw = await getMenu(date, canteenId);
    const menu = await filterMenu(menuRaw);
    let main = document.getElementById('mainContent');
    main.innerHTML = '';
    getDateFromDateBtn();
    if (menu.length) {
        const plannedMeals = await getPlannedMeals();
        const categories = getMenuCategories(menu);
        categories.forEach(category => {
            let menuCategory = menu.filter(meal => meal.category == category);
            if (menuCategory.length) {
                let collection = createMenuCollapsible(category);
                menuCategory.forEach(meal => {
                    createMenuCollapsibleItem(meal, plannedMeals, date, canteenId)
                    .then(item => collection.append(item));
                })
                main.appendChild(collection);
            };
        })
    } else {
        const operationMessage = await getBusinessDays(date, canteenId);
        main.appendChild(operationMessage);
    };
};


// Filter menu against userDiet
async function filterMenu(menu){
    if(isFilterChecked()){
        const userDiet = await getUserDiet().catch(error => console.log('Indb not ready yet. Please refresh page.'));
        if(userDiet.includes('vegan')){
            const menuVegan = menu.filter(function(meal){
                return meal.notes.includes('vegan');
            });
            menu = [...menuVegan];
        };
        if(userDiet.includes('vegetarisch')){
            const veggie = ['vegan','vegetarisch'];
            const menuVeggie = menu.filter(function(meal){
                return meal.notes.some(note => veggie.includes(note));
            });
            menu = [...menuVeggie];
        };
        if(userDiet.includes('allergene')){
            const allergs = await getUserAllergies();
            const menuAllergs = menu.filter(function(meal){
                return meal.notes.some(note => !allergs.includes(note));
            });
            menu = [...menuAllergs];
        };
        if(userDiet.includes('zusatzstoffe')){
            const adds = await getUserAdditives();
            const menuAdds = menu.filter(function(meal){
                return meal.notes.some(note => !adds.includes(note));
            });
            menu = [...menuAdds];
        };
    };
    return menu;
};



//create collapsible element
function createMenuCollapsible(category) {
    let collapsible = document.createElement('ul');
    collapsible.setAttribute('class', 'collapsible');
    let title = document.createElement('li');
    title.setAttribute('class', 'collapsible-title');
    title.innerText = category;
    collapsible.appendChild(title);
    M.Collapsible.init(collapsible, {
        accordion: true
    });
    return collapsible;
};


//create menu entry for collapsible
async function createMenuCollapsibleItem(meal, plannedMeals, date, canteenId) {
    let entry = document.createElement('li');
    let wrapper = document.createElement('div');
    wrapper.setAttribute('class', 'wrapper');
    let header = document.createElement('div');
    header.setAttribute('class', 'collapsible-header');
    header.innerText = meal.name;
    let icon = document.createElement('i');
    icon.setAttribute('onclick', `updateIcon(this); updatePlannedMeals(${JSON.stringify(meal)},${JSON.stringify(date)}, ${JSON.stringify(canteenId)})`);
    icon.innerHTML = 'notifications_none';
    if (plannedMeals.some(item => item.id === meal.id)) {
        icon.setAttribute('class', 'material-icons icon-clickable icon-active');
    } else {
        icon.setAttribute('class', 'material-icons icon-clickable');
    };
    let body = document.createElement('div');
    body.setAttribute('class', 'collapsible-body');
    let details = document.createElement('div');//
    details.setAttribute('class', 'meal-details');//
    details.innerHTML = meal.notes.join(', ');//
    let pricing = document.createElement('div');//
    pricing.innerHTML = await getMealPricing(meal);//
    pricing.setAttribute('class', 'meal-pricing');//
    body.appendChild(details);//
    body.appendChild(pricing);//
    wrapper.appendChild(header);
    wrapper.appendChild(icon);
    entry.appendChild(wrapper);
    entry.appendChild(body);
    return entry;
};


//return string of meal pricing
async function getMealPricing(meal) {
    const roles = await getUserRoles();
    let result = [];
    roles.forEach(role => {
        if(meal.prices[role.en]){
            result.push(`${role.de}: ${meal.prices[role.en].toLocaleString("de-DE", {style: "currency", currency: "EUR" })}`);
        };
    })
    return result.join(' | ');
};


// add/remove meal to/from indb column "planned Meals"
async function updatePlannedMeals(meal, date, canteenId) {
    meal.date = date;
    meal.canteenId = canteenId;
    const oldMeals = await getPlannedMeals();
    let newMeals = [];
    let isAddition = true;
    if (!oldMeals.length || !oldMeals.some(item => item.id === meal.id)){
        await createNotification(meal);
        oldMeals.push(meal);
        newMeals = [...oldMeals];
    } else {
        await deleteNotification(meal);
        newMeals = oldMeals.filter(item => item.id !== meal.id);
        isAddition = false;
    };
    db.transaction("rw", db.userStore, async() => {
        await db.userStore.orderBy('id').modify({
            "plannedMeals": newMeals.sort()
        });
    }).then(() => {
        showMealToast(isAddition);
    }).catch(Dexie.ModifyError, error => {
        console.error(`${error.failures.length} items failed to modify`);
    }).catch(error => 
        console.error(`Generic Error ${error}`)
    );
};


//create a scheduled push notification for each bookmarked canteen
// credits: Nico Martin, https://css-tricks.com/creating-scheduled-push-notifications/
async function createNotification(meal){
    if ('Notification' in window) {
        if (Notification.permission === 'granted') {
            navigator.serviceWorker.getRegistration().then(registration => {
                registration.showNotification(meal.name, {
                    tag: meal.id,
                    body: `Vorgemerkt für ${getLocalDate(meal.date)}`,
                    showTrigger: scheduleNotification(),
                    data: {
                        url: `${window.location.href}?canteenId=${meal.canteenId}`
                    },
                    //badge: './assets/badge.png',
                    icon: './img/mensastisch-512.png',
                    actions: [
                        {action: 'open', title: 'Open app'},
                        {action: 'close', title: 'Close notification'}
                    ]
                });
            }).catch(error => console.error(error));
        };  
    };
};


//convert date to german local date
function getLocalDate(date){
    return new Date(date).toLocaleDateString("de-DE");
};

//schedule time to show notification
function scheduleNotification(date){
    //return new TimestampTrigger(new Date(date).getTime() + 10 * 60 * 60 * 1000); // Day x at 10am
    return new TimestampTrigger(new Date().getTime() + 3 * 1000); // now plus 3000ms for Testing
};


// remove push notification from propagation list
async function deleteNotification(mealId){
    navigator.serviceWorker.getRegistration().then(registration => {
        registration.getNotifications({
            tag: mealId,
            includeTriggered: true,
        }).then(notifications => 
            notifications.forEach(notification => 
                notification.close()));
    }).catch(error => console.error(error)); 
};


//feedback on (un)bookmark meal
function showMealToast(isAddition) {
    if (isAddition) {
        displayToast('Gericht zu Essensplan hinzugefügt. <a href="/calendar">Essensplan</a>');
    } else {
        displayToast('Gericht aus Essensplan entfernt.');
    };
};

//feedback on (un)bookmark canteen
function showCanteenToast(isAddition) {
    if (isAddition) {
        displayToast('Mensa zu Favoriten hinzugefügt. <a href="/preferences">Benachrichtigungseinstellungen</a>');
    } else {
        displayToast('Mensa aus Favoriten entfernt.');
    };
};

//display Toast User Feedback
function displayToast(txt){
    M.toast({
        html: txt,
        displayLength: 2000,
    });
};



//////////////////////////////////////////////////////////////////////////////////////////
///Canteen Header
/////////////////////////////////////////////////////////////////////////////////////////

//add business day data to DOM
async function getBusinessDays(date, canteenId) {
    const opDays = await getDatesById(canteenId);
    const opDay = opDays.find(element => element.date == date.toLocaleDateString("en-CA"));
    let opDiv = document.createElement('div');
    opDiv.setAttribute('class', 'operating-hours');
    let opIcon = document.createElement('i');
    let opMsg = document.createElement('h4');
    if (opDay === undefined) {
        opIcon.setAttribute('class', 'large material-icons text-grey-dark');
        opMsg.setAttribute('class', 'text-grey-dark');
        opIcon.innerText = 'sentiment_very_dissatisfied';
        opMsg.innerHTML = 'Keine Daten.<br>Bitte wähle einen anderen Tag<br>oder passe Deine Filter an.';
    } else if (opDay.closed) {
        opIcon.setAttribute('class', 'large material-icons text-grey-dark');
        opMsg.setAttribute('class', 'text-grey-dark');
        opIcon.innerText = 'sentiment_very_dissatisfied';
        opMsg.innerHTML = 'Mensa geschlossen.<br>Bitte wähle einen anderen Tag.';
    } else {
        opIcon.setAttribute('class', 'large material-icons text-primary');
        opIcon.innerText = 'sentiment_very_satisfied';
        opMsg.innerHTML = 'Mensa geöffnet.<br>Komm vorbei!';
        opMsg.setAttribute('class', 'text-primary');
    }
    opDiv.appendChild(opIcon);
    opDiv.appendChild(opMsg);
    return opDiv;
};


// add/remove canteen to/from column "favourite Canteens"
async function updateFavouriteCanteens(canteenId) {
    const oldFav = await getFavouriteCanteens();
    let newFav = [];
    let isAddition = true;
    if (!oldFav.length || !oldFav.includes(canteenId)) {
        oldFav.push(canteenId);
        newFav = [...oldFav];
    } else {
        newFav = oldFav.filter(item => item !== canteenId);
        isAddition = false;
    };
    db.transaction("rw", db.userStore, async () => {
        await db.userStore.orderBy('id').modify({
            "favouriteCanteens": newFav.sort()
        });
    }).then(() => {
        showCanteenToast(isAddition);
    }).catch(Dexie.ModifyError, error => {
        console.error(`${error.failures.length} items failed to modify`);
    }).catch(error => {
        console.error(`Generic Error ${error}`);
    });
};


//update last visited canteen in indb
async function updateLastVisitedCanteen(canteenId){
    const last = await getLastVisitedCanteen();
    if(canteenId !== last){
        db.transaction("rw", db.userStore, async () => {
            await db.userStore.orderBy('id').modify({
                "lastVisitedCanteen": canteenId
            });
        }).catch(Dexie.ModifyError, error => {
            console.error(`${error.failures.length} items failed to modify`);
        }).catch(error => {
            console.error(`Generic Error ${error}`);
        });
    };
};


//show canteen Data by Id
async function showCanteenData(canteenId) {
    const canteen = await getCanteenById(canteenId);
    const favouriteCanteens = await getFavouriteCanteens().catch(error => console.log('Indb not ready yet. Please refresh page.'));
    const filterSwitch = await createFilterSwitch();
    let heroPrimary = document.querySelector('.heroPrimary');
    let name = document.createElement('h3');
    name.innerText = canteen.name;
    let address = document.createElement('h6');
    address.innerText = canteen.address;
    heroPrimary.appendChild(name);
    heroPrimary.appendChild(address);
    populateDateBtn(new Date(), canteenId);
    let heroSecondary = document.querySelector('.heroSecondary');
    let icon = document.createElement('i');
    icon.innerText = 'favorite_border';
    icon.setAttribute('onclick', `updateIcon(this); updateFavouriteCanteens(${canteenId})`);
    if (favouriteCanteens.includes(canteenId)) {
        icon.setAttribute('class', 'material-icons icon-clickable icon-active');
    } else {
        icon.setAttribute('class', 'material-icons icon-clickable');
    };
    heroSecondary.appendChild(icon);
    let heroTertiary = document.querySelector('.heroTertiary');
    heroTertiary.appendChild(filterSwitch);
    updateLastVisitedCanteen(canteenId);
};



//populate date field
function populateDateBtn(date, canteenId) {
    const weekdays = ['So','Mo','Di','Mi','Do','Fr','Sa'];
    document.getElementById('dateBtn').innerHTML = `${weekdays[date.getDay()]}. ${date.toLocaleDateString("ru-RU")}`;
    showMenu(date, canteenId);
};


// reads datestring from dateBtn, returns date
function getDateFromDateBtn(){
    const dateString = document.querySelector('#dateBtn').innerText;
    const parts = dateString.split('.');
    const date = new Date(parts[3], parts[2] - 1, parts[1]);
    return date;
};


//refresh date field
function refreshDateBtn(isAddition) {
    const oldDate = getDateFromDateBtn();
    const newDate = new Date();
    newDate.setTime(oldDate.getTime());
    if (isAddition) {
        newDate.setDate(oldDate.getDate() + 1);
    } else {
        newDate.setDate(oldDate.getDate() - 1);
    }
    populateDateBtn(newDate, getIdFromUrl());
};


// create menu filter switch
async function createFilterSwitch(){
    let div = document.createElement('div');
    div.setAttribute('class','switch');
    let label = document.createElement('label');
    label.innerText='Filter';
    const input = await createFilterSwitchInput();
    let span = document.createElement('span');
    span.setAttribute('class', 'lever');
    label.appendChild(input);
    label.appendChild(span);
    div.appendChild(label);
    return div;
};


// create Filter Switch Input Element
async function createFilterSwitchInput(){
    let input = document.createElement('input');
    input.setAttribute('type','checkbox');
    input.setAttribute('id','filterSwitch');
    input.setAttribute('onchange', 'showMenu(getDateFromDateBtn(), getIdFromUrl())');
    const diet = await getUserDiet().catch(error => console.log('Indb not ready yet. Please refresh page.'));
    if(!diet.length){
        input.disabled = true;
    } else {
        input.checked = true;
    };
    return input;
};



//////////////////////////////////////////////////////////////////////////////////////////
///HELPERS
/////////////////////////////////////////////////////////////////////////////////////////

// see if filter switch checked
function isFilterChecked(){
    const filterSwitch = document.querySelector('#filterSwitch');
    return filterSwitch.checked;
};


//change status of materialize icon
function updateIcon(icon) {
    if (icon.classList.contains("icon-active")) {
        icon.classList.remove("icon-active");
    } else {
        icon.classList.add("icon-active");
    };
};

//get last visited canteen
async function getLastVisitedCanteen(){
    const pref = await getUserPreferences();
    return pref.lastVisitedCanteen;
};


//get favourite canteens from indb
async function getFavouriteCanteens() {
    const pref = await getUserPreferences();
    return pref.favouriteCanteens;
};


// get user Diet entries from indb
async function getUserDiet(){
    const pref = await getUserPreferences();
    return pref.userDiet;
};

//get user data from indb
async function getPlannedMeals() {
    const pref = await getUserPreferences();
    return pref.plannedMeals;
};


//get canteen from indb by Id
async function getCanteenById(canteenId) {
    const canteen = await db.canteensStore.where('id').equals(canteenId).toArray();
    return canteen[0];
};


//get user allergies from indb
async function getUserAllergies() {
    const pref = await getUserPreferences();
    return pref.userAllergies;
};


//get user push notifications preference from indb
async function getUserRoles(){
    const pref = await getUserPreferences();
    return pref.userRoles;
};


//get User Preferences from Indb
async function getUserPreferences() {
    await db.open();
    const pref = await db.userStore.toArray();
    return pref[0];
};


//get Categories from menu
function getMenuCategories(menu) {
    let categories = [];
    menu.forEach(meal => {
        categories.push(meal.category);
    });
    return new Set(categories);
};


//get Menu by id, date
async function getMenu(date, canteenId) {
    const dateString = date.toLocaleDateString("en-CA");
    const url = `https://openmensa.org/api/v2/canteens/${canteenId}/days/${dateString}/meals`;
    const response = await fetch(url);
    if (!response.ok){
        return [];
    };
    const menu = await response.json();
    return menu;
};


//return canteen id from Url search parameters
function getIdFromUrl() {
    const params = new URLSearchParams(window.location.search);
    return params.get("canteenId");
};


//get canteen from indb by Id
async function getCanteenById(canteenId) {
    const canteen = await db.canteensStore.where('id').equals(canteenId).toArray();
    return canteen[0];
};


//get canteen's business days by canteen id
async function getDatesById(canteenId) {
    const url = `https://openmensa.org/api/v2/canteens/${canteenId}/days`;
    const response = await fetch(url);
    const dates = await response.json();
    return dates;
};


</script>
<%- include('partials/footer.ejs') -%>