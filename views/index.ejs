<%- include('partials/header.ejs') -%>

<div class="container hero bg-light">
    <div class="heroPrimary">
            <%- heroContentPrimary %>         
    </div>
</div>
<div class="container">
    <div class ="row" id="mainContent">
        <%- mainContent %>
    </div>
</div>

<script>
window.onload = <%= onload %>;

// add/remove meal to/from indb column "planned Meals"
async function updateMeal(mealId){
    const userData = await db.userStore.toArray();
    const oldMeals = userData[0].plannedMeals;
    let newMeals = [];
    if (!oldMeals.length || !oldMeals.includes(mealId)){
        oldMeals.push(mealId);
        newMeals=[...oldMeals];
    } else {
         newMeals = oldMeals.filter(item => item !== mealId);
    };
    await db.userStore
        .orderBy('id')
        .modify(userData =>{
            userData.plannedMeals = newMeals
        });    
};

//get canteen from indb by Id
async function getCanteenById(id) {
    const canteen = await db.canteensStore.where('id').equals(id).toArray();
    return canteen[0];
};



//add menu to DOM
async function showMenu(date, id){
    const menu = await getMenu(date, id);
    console.log(menu);
    let main = document.getElementById('mainContent');
    main.innerHTML= '';
    if (menu.length) {
        const categories = getMenuCategories(menu);
        categories.forEach(category =>{
            let menuCategory = menu.filter(meal => meal.category == category);
            if (menuCategory.length){
                let collection = createMenuCollection(category);
                menuCategory.forEach(meal =>{   
                    collection.append(createMenuCollectionItem(meal));       
                })
                main.appendChild(collection);
            };
        })
    } else {
        const operationMessage = await createOperationData(date,id);
        main.appendChild(operationMessage);
    };
};

//return string of meal pricing
function getMealPricing(meal){
    let resultStr ='';
    for (const [key, value] of Object.entries(meal.prices)) {
        if(value){
            resultStr += `${value.toLocaleString("de-DE", {style: "currency", currency: "EUR"})}&nbsp;| `;
        };
    };
    return resultStr.slice(0, -3);
};

//create collection element, collection title named after category
function createMenuCollection(category){
    let collection = document.createElement('ul');
    collection.setAttribute('class','collection with-header');
    let title = document.createElement('li');
    title.setAttribute('class', 'collection-header');
    title.innerText = category;
    collection.appendChild(title);
    return collection;
};

//create collapsible
function createMenuCollapsible(category){
    let coll = document.createElement('ul');
    coll.setAttribute('class','collapsible');
    coll.setAttribute('data-collapsible','accordion');
    return coll;
}

//create entry for menu collapsible
function createMenuCollapsibleItem(meal){
    let entry = document.createElement('li');
    let head = document.createElement('div');
    head.setAttribute('class', 'collapsible-header');
    head.innerText = meal.name;
    entry.appendChild(head);
    let body = document.createElement('div');
    body.setAttribute('class', 'collapsible-body');
    let span = document.createElement('span');
    span.innerText = getMealPricing(meal);
    body.appendChild(span);
    entry.appendChild(body);
    return entry;
}

// create entry for menu collection
function createMenuCollectionItem(meal){
    let entry = document.createElement('li');
    entry.setAttribute('class', 'collection-item');
    
    //let icon = document.createElement('i');
    //icon.setAttribute('class', 'material-icons');
    //icon.innerHTML= 'bookmark_border';

    let checkbox = document.createElement('input');
    checkbox.setAttribute('class', 'filled-in');
    checkbox.setAttribute('type', 'checkbox');
    checkbox.setAttribute('onchange', `updateMeal(${meal.id})`);

    let label = document.createElement('label');
    let span = document.createElement('span');

    let a = document.createElement('a');
    a.href = '#';
    a.setAttribute('class', 'secondary-content');

    label.appendChild(checkbox);
    label.appendChild(span);
    a.appendChild(label);

    let div = document.createElement('div');
    let name = document.createElement('span');
    name.setAttribute('class', 'title');
    name.innerText= meal.name;
    let prices = document.createElement('span');
    prices.setAttribute('class', 'line-below');
    prices.innerHTML= getMealPricing(meal);
    div.appendChild(name);
    div.appendChild(prices);
    //a.appendChild(icon);
    entry.appendChild(div);
    entry.appendChild(a);
    return entry;
};


//get Categories from menu
function getMenuCategories(menu){
    let categories = [];
    menu.forEach(meal =>{
        categories.push(meal.category);
    });
    return new Set(categories);
};


//get Menu by id, date
async function getMenu(date, id){
    const url = `https://openmensa.org/api/v2/canteens/${id}/days/${date}/meals`;
    const response = await fetch(url);
    const menu = await response.json();
    return menu;
};


//populate date field
function populateDateBtn(date, id){
    document.getElementById('dateBtn').innerHTML = date.toLocaleDateString("ru-RU");
    showMenu(date,id);
};


//adds business day data 
async function createOperationData(date, id){
    const opDays = await getDatesById(id);
    const opDay = opDays.find(element => element.date == date.toLocaleDateString("en-CA"));
    let opDiv = document.createElement('div');
    opDiv.setAttribute('class','operating-hours');
    let opIcon = document.createElement('i');
    let opMsg = document.createElement('h4');
    if (opDay === undefined){
        opIcon.setAttribute('class', 'large material-icons text-grey-dark');
        opMsg.setAttribute('class','text-grey-dark');
        opIcon.innerText= 'sentiment_very_dissatisfied';
        opMsg.innerHTML='No Data.<br>Please pick another day.'
    } else if (opDay.closed){
        opIcon.setAttribute('class', 'large material-icons text-grey-dark');
        opMsg.setAttribute('class','text-grey-dark');
        opIcon.innerText= 'sentiment_very_dissatisfied';
        opMsg.innerHTML='Canteen closed.<br>Please pick another day.'
    } else {
        opIcon.setAttribute('class', 'large material-icons text-primary');
        opIcon.innerText= 'sentiment_very_satisfied';
        opMsg.innerHTML='Canteen OPEN.<br>Come along!'
        opMsg.setAttribute('class','text-primary');
    }
    opDiv.appendChild(opIcon);
    opDiv.appendChild(opMsg);
    return opDiv;
};


//refresh date field
function refreshDateBtn(datestring, isAddition){
    const parts = datestring.split('.');
    const oldDate = new Date(parts[2], parts[1], parts[0]);
    const newDate = new Date();
    if(isAddition){
        newDate.setDate(oldDate.getDate() + 1);
    } else {
        newDate.setDate(oldDate.getDate() - 1);
    }
    populateDateBtn(newDate, getIdFromUrl());
};


//return canteen id from Url search parameters
function getIdFromUrl(){
    const params = new URLSearchParams(window.location.search);
    return params.get("canteenId");
};


//show canteen Data by Id
async function showCanteenData(id){
    const canteen = await getCanteenById(id);
    let hero = document.querySelector('.heroPrimary');
    let name = document.createElement('h4');
    name.innerText = canteen.name;
    let address = document.createElement('h5');
    address.innerText = canteen.address;
    hero.appendChild(name);
    hero.appendChild(address);
    populateDateBtn(new Date(), id);
};


//get canteen from indb by Id
async function getCanteenById(id) {
    const canteen = await db.canteensStore.where('id').equals(id).toArray();
    return canteen[0];
};


//get canteen's opening dates by canteen id
async function getDatesById(id) {
    const url = `https://openmensa.org/api/v2/canteens/${id}/days`;
    const response = await fetch(url);
    const dates = await response.json();
    return dates;
};

</script>
<%- include('partials/footer.ejs') -%>