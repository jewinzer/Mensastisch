<%- include('partials/header.ejs') %>
<div class="container hero bg-light">
    <div class ="row d-flex">
        <div class="col s6 offset-s3 center-align">
            <i class="small material-icons text-primary">place</i>
            <h5 id="msgGPS"><%- heroMessage %></h5>
        </div>
        <div class="col s3 d-flex-column justify-content-end">
            <div class="switch">
                <label>
                    <input id="allowGPS" type="checkbox" <%= checked %>
                        onchange="if (event.currentTarget.checked) {document.location = '../canteen/locate'}
                        else {document.location = '../canteen/search'}">
                    <span class="lever"></span>
                </label>
            </div>
        </div>
    </div>
    <div class ="row hero-content center-align">
        <div class="col s12">
            <%- heroContent %>
        </div>
    </div>

</div>
<div class="container">
    <%- mainContent %>
</div>

<script>

window.onload = <%= onload %>;

//get canteens from indb by City
async function getCanteensByCity(str) {
    const results = await db.canteensStore.where('city').startsWithIgnoreCase(str).toArray();
    return results;
};


//get x nearest Canteens from indb
async function getNearestCanteens(x) {
    const results = await db.canteensStore.orderBy('distance').limit(x).toArray();
    return results;
};


//show canteen search results
async function showCanteensByCity(str){
    const results = await getCanteensByCity(str);
    addToDOM(results);
};


//show canteen geolocation results
async function showCanteensByLocation(lat,lng,x){
    await addDistance(lat,lng);
    const results = await getNearestCanteens(x);
    addToDOM(results);
};


// append query results to DOM
function addToDOM(results){
    let resultList = document.getElementById('searchResults');
    resultList.setAttribute('class','collection with-header');
    resultList.innerHTML= '';
    let title = document.createElement('li');
    title.setAttribute('class', 'collection-header');
    if(addToDOM.caller.name == 'showCanteensByLocation'){
        title.innerText='Closest Canteens';
    } else {
        title.innerText='Canteens found';
    };
    resultList.appendChild(title);
    results.forEach(result => {
        let entry = document.createElement('li');
        entry.setAttribute('class', 'collection-item');
        let icon = document.createElement('i');
        icon.setAttribute('class', 'material-icons');
        icon.innerHTML= 'play_arrow';
        let a = document.createElement('a');
        a.href = `../?canteenId=${result.id}`;
        a.setAttribute('class', 'secondary-content');
        let div = document.createElement('div');
        let name = document.createElement('span');
        name.setAttribute('class', 'title');
        name.innerText= result.name;
        let address = document.createElement('span');
        address.setAttribute('class', 'line-below');
        address.innerHTML= result.address;
        if(addToDOM.caller.name == 'showCanteensByLocation'){
            let dist = document.createElement('span');
            dist.setAttribute('class', 'line-above');
            dist.innerHTML= `${result.distance} km`;
            div.appendChild(dist);
        };
        div.appendChild(name);
        div.appendChild(address);
        a.appendChild(icon);
        entry.appendChild(div);
        entry.appendChild(a);
        resultList.appendChild(entry);
    })
};


//get user's GPS coordinates
function getUserLocation(){
    console.log('locating User');
    if("geolocation" in navigator){
        navigator.geolocation.getCurrentPosition(geo_success, geo_error, {
            enableHighAccuracy: false, 
            timeout: 1000*30, 
            maximumAge: 1000*60*60
        });
    } else {
        document.getElementById('msgGPS').innerText = 'GPS unavailable. Please update browser.';
    }
};


//callback if GPS coordinates available
function geo_success(position){
    document.location=`/canteen?lat=${position.coords.latitude}&lng=${position.coords.longitude}`;
};

    
//callback if GPS coordinates unavailable
function geo_error(err){
    const {code} = err;
    switch (code) {
        case GeolocationPositionError.TIMEOUT:
            document.getElementById('msgGPS').innerText = "That took too long. Please try again.";
            break;
        case GeolocationPositionError.PERMISSION_DENIED:
            document.getElementById('msgGPS').innerText = "Please allow GPS in system preferences.";
            break;
        case GeolocationPositionError.POSITION_UNAVAILABLE:
            document.getElementById('msgGPS').innerText = "Position unavailable. Please try again.";
            break;
    }
};


//populate indexedDB column "distance"
async function addDistance(lat, lng){
    await db.open();
    await db.canteensStore
        .orderBy('name')
        .modify(canteen => {
        canteen.distance = getDistance(lat, lng, canteen.coordinates[0], canteen.coordinates[1]);
    });
};


// calculate distance between coordinates, credits: http://jsfiddle.net/edgren/gAHJB/
function getDistance(lat1, lng1, lat2, lng2) {
    const R = 6371; // Radius of the earth in km
    const dLat = deg2rad(lat2-lat1);  // deg2rad below
    const dLng = deg2rad(lng2-lng1); 
    const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLng/2) * Math.sin(dLng/2); 
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
    const distance = R * c;
    return roundToTwo(distance);
};

//helper, radius
function deg2rad(deg) {
    return deg * (Math.PI/180)
};

//helper, rounding
function roundToTwo(num) {
    return +(Math.round(num + "e+2")  + "e-2");
};
</script>

<%- include('partials/footer.ejs') %>